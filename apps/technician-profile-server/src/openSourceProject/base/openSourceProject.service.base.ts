/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OpenSourceProject as PrismaOpenSourceProject,
} from "@prisma/client";

export class OpenSourceProjectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OpenSourceProjectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.openSourceProject.count(args);
  }

  async openSourceProjects(
    args: Prisma.OpenSourceProjectFindManyArgs
  ): Promise<PrismaOpenSourceProject[]> {
    return this.prisma.openSourceProject.findMany(args);
  }
  async openSourceProject(
    args: Prisma.OpenSourceProjectFindUniqueArgs
  ): Promise<PrismaOpenSourceProject | null> {
    return this.prisma.openSourceProject.findUnique(args);
  }
  async createOpenSourceProject(
    args: Prisma.OpenSourceProjectCreateArgs
  ): Promise<PrismaOpenSourceProject> {
    return this.prisma.openSourceProject.create(args);
  }
  async updateOpenSourceProject(
    args: Prisma.OpenSourceProjectUpdateArgs
  ): Promise<PrismaOpenSourceProject> {
    return this.prisma.openSourceProject.update(args);
  }
  async deleteOpenSourceProject(
    args: Prisma.OpenSourceProjectDeleteArgs
  ): Promise<PrismaOpenSourceProject> {
    return this.prisma.openSourceProject.delete(args);
  }
}
