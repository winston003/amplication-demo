/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OpenSourceProject } from "./OpenSourceProject";
import { OpenSourceProjectCountArgs } from "./OpenSourceProjectCountArgs";
import { OpenSourceProjectFindManyArgs } from "./OpenSourceProjectFindManyArgs";
import { OpenSourceProjectFindUniqueArgs } from "./OpenSourceProjectFindUniqueArgs";
import { CreateOpenSourceProjectArgs } from "./CreateOpenSourceProjectArgs";
import { UpdateOpenSourceProjectArgs } from "./UpdateOpenSourceProjectArgs";
import { DeleteOpenSourceProjectArgs } from "./DeleteOpenSourceProjectArgs";
import { OpenSourceProjectService } from "../openSourceProject.service";
@graphql.Resolver(() => OpenSourceProject)
export class OpenSourceProjectResolverBase {
  constructor(protected readonly service: OpenSourceProjectService) {}

  async _openSourceProjectsMeta(
    @graphql.Args() args: OpenSourceProjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OpenSourceProject])
  async openSourceProjects(
    @graphql.Args() args: OpenSourceProjectFindManyArgs
  ): Promise<OpenSourceProject[]> {
    return this.service.openSourceProjects(args);
  }

  @graphql.Query(() => OpenSourceProject, { nullable: true })
  async openSourceProject(
    @graphql.Args() args: OpenSourceProjectFindUniqueArgs
  ): Promise<OpenSourceProject | null> {
    const result = await this.service.openSourceProject(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OpenSourceProject)
  async createOpenSourceProject(
    @graphql.Args() args: CreateOpenSourceProjectArgs
  ): Promise<OpenSourceProject> {
    return await this.service.createOpenSourceProject({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => OpenSourceProject)
  async updateOpenSourceProject(
    @graphql.Args() args: UpdateOpenSourceProjectArgs
  ): Promise<OpenSourceProject | null> {
    try {
      return await this.service.updateOpenSourceProject({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OpenSourceProject)
  async deleteOpenSourceProject(
    @graphql.Args() args: DeleteOpenSourceProjectArgs
  ): Promise<OpenSourceProject | null> {
    try {
      return await this.service.deleteOpenSourceProject(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
