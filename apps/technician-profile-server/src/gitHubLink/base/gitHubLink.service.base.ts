/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GitHubLink as PrismaGitHubLink } from "@prisma/client";

export class GitHubLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GitHubLinkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gitHubLink.count(args);
  }

  async gitHubLinks(
    args: Prisma.GitHubLinkFindManyArgs
  ): Promise<PrismaGitHubLink[]> {
    return this.prisma.gitHubLink.findMany(args);
  }
  async gitHubLink(
    args: Prisma.GitHubLinkFindUniqueArgs
  ): Promise<PrismaGitHubLink | null> {
    return this.prisma.gitHubLink.findUnique(args);
  }
  async createGitHubLink(
    args: Prisma.GitHubLinkCreateArgs
  ): Promise<PrismaGitHubLink> {
    return this.prisma.gitHubLink.create(args);
  }
  async updateGitHubLink(
    args: Prisma.GitHubLinkUpdateArgs
  ): Promise<PrismaGitHubLink> {
    return this.prisma.gitHubLink.update(args);
  }
  async deleteGitHubLink(
    args: Prisma.GitHubLinkDeleteArgs
  ): Promise<PrismaGitHubLink> {
    return this.prisma.gitHubLink.delete(args);
  }
}
