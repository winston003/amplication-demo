/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GitHubLinkService } from "../gitHubLink.service";
import { GitHubLinkCreateInput } from "./GitHubLinkCreateInput";
import { GitHubLink } from "./GitHubLink";
import { GitHubLinkFindManyArgs } from "./GitHubLinkFindManyArgs";
import { GitHubLinkWhereUniqueInput } from "./GitHubLinkWhereUniqueInput";
import { GitHubLinkUpdateInput } from "./GitHubLinkUpdateInput";

export class GitHubLinkControllerBase {
  constructor(protected readonly service: GitHubLinkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GitHubLink })
  async createGitHubLink(
    @common.Body() data: GitHubLinkCreateInput
  ): Promise<GitHubLink> {
    return await this.service.createGitHubLink({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        repoName: true,
        repoUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GitHubLink] })
  @ApiNestedQuery(GitHubLinkFindManyArgs)
  async gitHubLinks(@common.Req() request: Request): Promise<GitHubLink[]> {
    const args = plainToClass(GitHubLinkFindManyArgs, request.query);
    return this.service.gitHubLinks({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        repoName: true,
        repoUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GitHubLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gitHubLink(
    @common.Param() params: GitHubLinkWhereUniqueInput
  ): Promise<GitHubLink | null> {
    const result = await this.service.gitHubLink({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        repoName: true,
        repoUrl: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GitHubLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGitHubLink(
    @common.Param() params: GitHubLinkWhereUniqueInput,
    @common.Body() data: GitHubLinkUpdateInput
  ): Promise<GitHubLink | null> {
    try {
      return await this.service.updateGitHubLink({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          repoName: true,
          repoUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GitHubLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGitHubLink(
    @common.Param() params: GitHubLinkWhereUniqueInput
  ): Promise<GitHubLink | null> {
    try {
      return await this.service.deleteGitHubLink({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          repoName: true,
          repoUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
