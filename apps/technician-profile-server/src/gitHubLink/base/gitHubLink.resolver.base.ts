/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GitHubLink } from "./GitHubLink";
import { GitHubLinkCountArgs } from "./GitHubLinkCountArgs";
import { GitHubLinkFindManyArgs } from "./GitHubLinkFindManyArgs";
import { GitHubLinkFindUniqueArgs } from "./GitHubLinkFindUniqueArgs";
import { CreateGitHubLinkArgs } from "./CreateGitHubLinkArgs";
import { UpdateGitHubLinkArgs } from "./UpdateGitHubLinkArgs";
import { DeleteGitHubLinkArgs } from "./DeleteGitHubLinkArgs";
import { GitHubLinkService } from "../gitHubLink.service";
@graphql.Resolver(() => GitHubLink)
export class GitHubLinkResolverBase {
  constructor(protected readonly service: GitHubLinkService) {}

  async _gitHubLinksMeta(
    @graphql.Args() args: GitHubLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GitHubLink])
  async gitHubLinks(
    @graphql.Args() args: GitHubLinkFindManyArgs
  ): Promise<GitHubLink[]> {
    return this.service.gitHubLinks(args);
  }

  @graphql.Query(() => GitHubLink, { nullable: true })
  async gitHubLink(
    @graphql.Args() args: GitHubLinkFindUniqueArgs
  ): Promise<GitHubLink | null> {
    const result = await this.service.gitHubLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GitHubLink)
  async createGitHubLink(
    @graphql.Args() args: CreateGitHubLinkArgs
  ): Promise<GitHubLink> {
    return await this.service.createGitHubLink({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GitHubLink)
  async updateGitHubLink(
    @graphql.Args() args: UpdateGitHubLinkArgs
  ): Promise<GitHubLink | null> {
    try {
      return await this.service.updateGitHubLink({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GitHubLink)
  async deleteGitHubLink(
    @graphql.Args() args: DeleteGitHubLinkArgs
  ): Promise<GitHubLink | null> {
    try {
      return await this.service.deleteGitHubLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
