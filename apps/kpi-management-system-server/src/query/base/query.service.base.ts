/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Query as PrismaQuery,
  User as PrismaUser,
} from "@prisma/client";

export class QueryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QueryCountArgs, "select">): Promise<number> {
    return this.prisma.query.count(args);
  }

  async queries(args: Prisma.QueryFindManyArgs): Promise<PrismaQuery[]> {
    return this.prisma.query.findMany(args);
  }
  async query(args: Prisma.QueryFindUniqueArgs): Promise<PrismaQuery | null> {
    return this.prisma.query.findUnique(args);
  }
  async createQuery(args: Prisma.QueryCreateArgs): Promise<PrismaQuery> {
    return this.prisma.query.create(args);
  }
  async updateQuery(args: Prisma.QueryUpdateArgs): Promise<PrismaQuery> {
    return this.prisma.query.update(args);
  }
  async deleteQuery(args: Prisma.QueryDeleteArgs): Promise<PrismaQuery> {
    return this.prisma.query.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.query
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
