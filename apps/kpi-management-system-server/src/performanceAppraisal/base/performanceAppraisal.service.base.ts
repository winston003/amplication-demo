/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PerformanceAppraisal as PrismaPerformanceAppraisal,
} from "@prisma/client";

export class PerformanceAppraisalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PerformanceAppraisalCountArgs, "select">
  ): Promise<number> {
    return this.prisma.performanceAppraisal.count(args);
  }

  async performanceAppraisals(
    args: Prisma.PerformanceAppraisalFindManyArgs
  ): Promise<PrismaPerformanceAppraisal[]> {
    return this.prisma.performanceAppraisal.findMany(args);
  }
  async performanceAppraisal(
    args: Prisma.PerformanceAppraisalFindUniqueArgs
  ): Promise<PrismaPerformanceAppraisal | null> {
    return this.prisma.performanceAppraisal.findUnique(args);
  }
  async createPerformanceAppraisal(
    args: Prisma.PerformanceAppraisalCreateArgs
  ): Promise<PrismaPerformanceAppraisal> {
    return this.prisma.performanceAppraisal.create(args);
  }
  async updatePerformanceAppraisal(
    args: Prisma.PerformanceAppraisalUpdateArgs
  ): Promise<PrismaPerformanceAppraisal> {
    return this.prisma.performanceAppraisal.update(args);
  }
  async deletePerformanceAppraisal(
    args: Prisma.PerformanceAppraisalDeleteArgs
  ): Promise<PrismaPerformanceAppraisal> {
    return this.prisma.performanceAppraisal.delete(args);
  }
}
