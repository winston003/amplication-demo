/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PerformanceAppraisal } from "./PerformanceAppraisal";
import { PerformanceAppraisalCountArgs } from "./PerformanceAppraisalCountArgs";
import { Query } from "../../query/base/Query";
import { PerformanceAppraisalFindManyArgs } from "./PerformanceAppraisalFindManyArgs";
import { PerformanceAppraisalFindUniqueArgs } from "./PerformanceAppraisalFindUniqueArgs";
import { CreatePerformanceAppraisalArgs } from "./CreatePerformanceAppraisalArgs";
import { UpdatePerformanceAppraisalArgs } from "./UpdatePerformanceAppraisalArgs";
import { DeletePerformanceAppraisalArgs } from "./DeletePerformanceAppraisalArgs";
import { PerformanceAppraisalService } from "../performanceAppraisal.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PerformanceAppraisal)
export class PerformanceAppraisalResolverBase {
  constructor(
    protected readonly service: PerformanceAppraisalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PerformanceAppraisal",
    action: "read",
    possession: "any",
  })
  async _performanceAppraisalsMeta(
    @graphql.Args() args: PerformanceAppraisalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PerformanceAppraisal])
  @nestAccessControl.UseRoles({
    resource: "PerformanceAppraisal",
    action: "read",
    possession: "any",
  })
  async performanceAppraisals(
    @graphql.Args() args: PerformanceAppraisalFindManyArgs
  ): Promise<PerformanceAppraisal[]> {
    return this.service.performanceAppraisals(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PerformanceAppraisal, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PerformanceAppraisal",
    action: "read",
    possession: "own",
  })
  async performanceAppraisal(
    @graphql.Args() args: PerformanceAppraisalFindUniqueArgs
  ): Promise<PerformanceAppraisal | null> {
    const result = await this.service.performanceAppraisal(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PerformanceAppraisal)
  @nestAccessControl.UseRoles({
    resource: "PerformanceAppraisal",
    action: "create",
    possession: "any",
  })
  async createPerformanceAppraisal(
    @graphql.Args() args: CreatePerformanceAppraisalArgs
  ): Promise<PerformanceAppraisal> {
    return await this.service.createPerformanceAppraisal({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PerformanceAppraisal)
  @nestAccessControl.UseRoles({
    resource: "PerformanceAppraisal",
    action: "update",
    possession: "any",
  })
  async updatePerformanceAppraisal(
    @graphql.Args() args: UpdatePerformanceAppraisalArgs
  ): Promise<PerformanceAppraisal | null> {
    try {
      return await this.service.updatePerformanceAppraisal({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PerformanceAppraisal)
  @nestAccessControl.UseRoles({
    resource: "PerformanceAppraisal",
    action: "delete",
    possession: "any",
  })
  async deletePerformanceAppraisal(
    @graphql.Args() args: DeletePerformanceAppraisalArgs
  ): Promise<PerformanceAppraisal | null> {
    try {
      return await this.service.deletePerformanceAppraisal(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
