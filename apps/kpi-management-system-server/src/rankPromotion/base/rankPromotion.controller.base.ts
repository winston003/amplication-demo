/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RankPromotionService } from "../rankPromotion.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RankPromotionCreateInput } from "./RankPromotionCreateInput";
import { RankPromotion } from "./RankPromotion";
import { RankPromotionFindManyArgs } from "./RankPromotionFindManyArgs";
import { RankPromotionWhereUniqueInput } from "./RankPromotionWhereUniqueInput";
import { RankPromotionUpdateInput } from "./RankPromotionUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RankPromotionControllerBase {
  constructor(
    protected readonly service: RankPromotionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RankPromotion })
  @nestAccessControl.UseRoles({
    resource: "RankPromotion",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRankPromotion(
    @common.Body() data: RankPromotionCreateInput
  ): Promise<RankPromotion> {
    return await this.service.createRankPromotion({
      data: {
        ...data,

        rank: data.rank
          ? {
              connect: data.rank,
            }
          : undefined,
      },
      select: {
        applicant: true,
        applicationDate: true,
        approvalStatus: true,
        createdAt: true,
        id: true,

        rank: {
          select: {
            id: true,
          },
        },

        reviewCommittee: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [RankPromotion] })
  @ApiNestedQuery(RankPromotionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RankPromotion",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async rankPromotions(
    @common.Req() request: Request
  ): Promise<RankPromotion[]> {
    const args = plainToClass(RankPromotionFindManyArgs, request.query);
    return this.service.rankPromotions({
      ...args,
      select: {
        applicant: true,
        applicationDate: true,
        approvalStatus: true,
        createdAt: true,
        id: true,

        rank: {
          select: {
            id: true,
          },
        },

        reviewCommittee: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RankPromotion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RankPromotion",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async rankPromotion(
    @common.Param() params: RankPromotionWhereUniqueInput
  ): Promise<RankPromotion | null> {
    const result = await this.service.rankPromotion({
      where: params,
      select: {
        applicant: true,
        applicationDate: true,
        approvalStatus: true,
        createdAt: true,
        id: true,

        rank: {
          select: {
            id: true,
          },
        },

        reviewCommittee: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RankPromotion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RankPromotion",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRankPromotion(
    @common.Param() params: RankPromotionWhereUniqueInput,
    @common.Body() data: RankPromotionUpdateInput
  ): Promise<RankPromotion | null> {
    try {
      return await this.service.updateRankPromotion({
        where: params,
        data: {
          ...data,

          rank: data.rank
            ? {
                connect: data.rank,
              }
            : undefined,
        },
        select: {
          applicant: true,
          applicationDate: true,
          approvalStatus: true,
          createdAt: true,
          id: true,

          rank: {
            select: {
              id: true,
            },
          },

          reviewCommittee: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RankPromotion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RankPromotion",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRankPromotion(
    @common.Param() params: RankPromotionWhereUniqueInput
  ): Promise<RankPromotion | null> {
    try {
      return await this.service.deleteRankPromotion({
        where: params,
        select: {
          applicant: true,
          applicationDate: true,
          approvalStatus: true,
          createdAt: true,
          id: true,

          rank: {
            select: {
              id: true,
            },
          },

          reviewCommittee: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
