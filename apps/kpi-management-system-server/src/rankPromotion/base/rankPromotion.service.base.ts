/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RankPromotion as PrismaRankPromotion,
  Rank as PrismaRank,
} from "@prisma/client";

export class RankPromotionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RankPromotionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.rankPromotion.count(args);
  }

  async rankPromotions(
    args: Prisma.RankPromotionFindManyArgs
  ): Promise<PrismaRankPromotion[]> {
    return this.prisma.rankPromotion.findMany(args);
  }
  async rankPromotion(
    args: Prisma.RankPromotionFindUniqueArgs
  ): Promise<PrismaRankPromotion | null> {
    return this.prisma.rankPromotion.findUnique(args);
  }
  async createRankPromotion(
    args: Prisma.RankPromotionCreateArgs
  ): Promise<PrismaRankPromotion> {
    return this.prisma.rankPromotion.create(args);
  }
  async updateRankPromotion(
    args: Prisma.RankPromotionUpdateArgs
  ): Promise<PrismaRankPromotion> {
    return this.prisma.rankPromotion.update(args);
  }
  async deleteRankPromotion(
    args: Prisma.RankPromotionDeleteArgs
  ): Promise<PrismaRankPromotion> {
    return this.prisma.rankPromotion.delete(args);
  }

  async getRank(parentId: string): Promise<PrismaRank | null> {
    return this.prisma.rankPromotion
      .findUnique({
        where: { id: parentId },
      })
      .rank();
  }
}
