/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RankPromotion } from "./RankPromotion";
import { RankPromotionCountArgs } from "./RankPromotionCountArgs";
import { RankPromotionFindManyArgs } from "./RankPromotionFindManyArgs";
import { Query } from "../../query/base/Query";
import { RankPromotionFindUniqueArgs } from "./RankPromotionFindUniqueArgs";
import { CreateRankPromotionArgs } from "./CreateRankPromotionArgs";
import { UpdateRankPromotionArgs } from "./UpdateRankPromotionArgs";
import { DeleteRankPromotionArgs } from "./DeleteRankPromotionArgs";
import { Rank } from "../../rank/base/Rank";
import { RankPromotionService } from "../rankPromotion.service";
@graphql.Resolver(() => RankPromotion)
export class RankPromotionResolverBase {
  constructor(protected readonly service: RankPromotionService) {}

  async _rankPromotionsMeta(
    @graphql.Args() args: RankPromotionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RankPromotion])
  async rankPromotions(
    @graphql.Args() args: RankPromotionFindManyArgs
  ): Promise<RankPromotion[]> {
    return this.service.rankPromotions(args);
  }

  @graphql.Query(() => RankPromotion, { nullable: true })
  async rankPromotion(
    @graphql.Args() args: RankPromotionFindUniqueArgs
  ): Promise<RankPromotion | null> {
    const result = await this.service.rankPromotion(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RankPromotion)
  async createRankPromotion(
    @graphql.Args() args: CreateRankPromotionArgs
  ): Promise<RankPromotion> {
    return await this.service.createRankPromotion({
      ...args,
      data: {
        ...args.data,

        rank: args.data.rank
          ? {
              connect: args.data.rank,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RankPromotion)
  async updateRankPromotion(
    @graphql.Args() args: UpdateRankPromotionArgs
  ): Promise<RankPromotion | null> {
    try {
      return await this.service.updateRankPromotion({
        ...args,
        data: {
          ...args.data,

          rank: args.data.rank
            ? {
                connect: args.data.rank,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RankPromotion)
  async deleteRankPromotion(
    @graphql.Args() args: DeleteRankPromotionArgs
  ): Promise<RankPromotion | null> {
    try {
      return await this.service.deleteRankPromotion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Rank, {
    nullable: true,
    name: "rank",
  })
  async getRank(@graphql.Parent() parent: RankPromotion): Promise<Rank | null> {
    const result = await this.service.getRank(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
