/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { KpiClassificationService } from "../kpiClassification.service";
import { KpiClassificationCreateInput } from "./KpiClassificationCreateInput";
import { KpiClassification } from "./KpiClassification";
import { KpiClassificationFindManyArgs } from "./KpiClassificationFindManyArgs";
import { KpiClassificationWhereUniqueInput } from "./KpiClassificationWhereUniqueInput";
import { KpiClassificationUpdateInput } from "./KpiClassificationUpdateInput";

export class KpiClassificationControllerBase {
  constructor(protected readonly service: KpiClassificationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: KpiClassification })
  async createKpiClassification(
    @common.Body() data: KpiClassificationCreateInput
  ): Promise<KpiClassification> {
    return await this.service.createKpiClassification({
      data: data,
      select: {
        createdAt: true,
        id: true,
        level: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [KpiClassification] })
  @ApiNestedQuery(KpiClassificationFindManyArgs)
  async kpiClassifications(
    @common.Req() request: Request
  ): Promise<KpiClassification[]> {
    const args = plainToClass(KpiClassificationFindManyArgs, request.query);
    return this.service.kpiClassifications({
      ...args,
      select: {
        createdAt: true,
        id: true,
        level: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: KpiClassification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async kpiClassification(
    @common.Param() params: KpiClassificationWhereUniqueInput
  ): Promise<KpiClassification | null> {
    const result = await this.service.kpiClassification({
      where: params,
      select: {
        createdAt: true,
        id: true,
        level: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: KpiClassification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateKpiClassification(
    @common.Param() params: KpiClassificationWhereUniqueInput,
    @common.Body() data: KpiClassificationUpdateInput
  ): Promise<KpiClassification | null> {
    try {
      return await this.service.updateKpiClassification({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          level: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: KpiClassification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteKpiClassification(
    @common.Param() params: KpiClassificationWhereUniqueInput
  ): Promise<KpiClassification | null> {
    try {
      return await this.service.deleteKpiClassification({
        where: params,
        select: {
          createdAt: true,
          id: true,
          level: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
