/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  KpiClassification as PrismaKpiClassification,
} from "@prisma/client";

export class KpiClassificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.KpiClassificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.kpiClassification.count(args);
  }

  async kpiClassifications(
    args: Prisma.KpiClassificationFindManyArgs
  ): Promise<PrismaKpiClassification[]> {
    return this.prisma.kpiClassification.findMany(args);
  }
  async kpiClassification(
    args: Prisma.KpiClassificationFindUniqueArgs
  ): Promise<PrismaKpiClassification | null> {
    return this.prisma.kpiClassification.findUnique(args);
  }
  async createKpiClassification(
    args: Prisma.KpiClassificationCreateArgs
  ): Promise<PrismaKpiClassification> {
    return this.prisma.kpiClassification.create(args);
  }
  async updateKpiClassification(
    args: Prisma.KpiClassificationUpdateArgs
  ): Promise<PrismaKpiClassification> {
    return this.prisma.kpiClassification.update(args);
  }
  async deleteKpiClassification(
    args: Prisma.KpiClassificationDeleteArgs
  ): Promise<PrismaKpiClassification> {
    return this.prisma.kpiClassification.delete(args);
  }
}
