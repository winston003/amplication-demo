/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RankAdjustmentService } from "../rankAdjustment.service";
import { RankAdjustmentCreateInput } from "./RankAdjustmentCreateInput";
import { RankAdjustment } from "./RankAdjustment";
import { RankAdjustmentFindManyArgs } from "./RankAdjustmentFindManyArgs";
import { RankAdjustmentWhereUniqueInput } from "./RankAdjustmentWhereUniqueInput";
import { RankAdjustmentUpdateInput } from "./RankAdjustmentUpdateInput";

export class RankAdjustmentControllerBase {
  constructor(protected readonly service: RankAdjustmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RankAdjustment })
  async createRankAdjustment(
    @common.Body() data: RankAdjustmentCreateInput
  ): Promise<RankAdjustment> {
    return await this.service.createRankAdjustment({
      data: {
        ...data,

        rank: data.rank
          ? {
              connect: data.rank,
            }
          : undefined,
      },
      select: {
        adjustmentReason: true,
        createdAt: true,
        effectiveDate: true,
        id: true,

        rank: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RankAdjustment] })
  @ApiNestedQuery(RankAdjustmentFindManyArgs)
  async rankAdjustments(
    @common.Req() request: Request
  ): Promise<RankAdjustment[]> {
    const args = plainToClass(RankAdjustmentFindManyArgs, request.query);
    return this.service.rankAdjustments({
      ...args,
      select: {
        adjustmentReason: true,
        createdAt: true,
        effectiveDate: true,
        id: true,

        rank: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RankAdjustment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rankAdjustment(
    @common.Param() params: RankAdjustmentWhereUniqueInput
  ): Promise<RankAdjustment | null> {
    const result = await this.service.rankAdjustment({
      where: params,
      select: {
        adjustmentReason: true,
        createdAt: true,
        effectiveDate: true,
        id: true,

        rank: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RankAdjustment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRankAdjustment(
    @common.Param() params: RankAdjustmentWhereUniqueInput,
    @common.Body() data: RankAdjustmentUpdateInput
  ): Promise<RankAdjustment | null> {
    try {
      return await this.service.updateRankAdjustment({
        where: params,
        data: {
          ...data,

          rank: data.rank
            ? {
                connect: data.rank,
              }
            : undefined,
        },
        select: {
          adjustmentReason: true,
          createdAt: true,
          effectiveDate: true,
          id: true,

          rank: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RankAdjustment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRankAdjustment(
    @common.Param() params: RankAdjustmentWhereUniqueInput
  ): Promise<RankAdjustment | null> {
    try {
      return await this.service.deleteRankAdjustment({
        where: params,
        select: {
          adjustmentReason: true,
          createdAt: true,
          effectiveDate: true,
          id: true,

          rank: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
