/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RankAdjustment } from "./RankAdjustment";
import { RankAdjustmentCountArgs } from "./RankAdjustmentCountArgs";
import { RankAdjustmentFindManyArgs } from "./RankAdjustmentFindManyArgs";
import { Query } from "../../query/base/Query";
import { RankAdjustmentFindUniqueArgs } from "./RankAdjustmentFindUniqueArgs";
import { CreateRankAdjustmentArgs } from "./CreateRankAdjustmentArgs";
import { UpdateRankAdjustmentArgs } from "./UpdateRankAdjustmentArgs";
import { DeleteRankAdjustmentArgs } from "./DeleteRankAdjustmentArgs";
import { Rank } from "../../rank/base/Rank";
import { RankAdjustmentService } from "../rankAdjustment.service";
@graphql.Resolver(() => RankAdjustment)
export class RankAdjustmentResolverBase {
  constructor(protected readonly service: RankAdjustmentService) {}

  async _rankAdjustmentsMeta(
    @graphql.Args() args: RankAdjustmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RankAdjustment])
  async rankAdjustments(
    @graphql.Args() args: RankAdjustmentFindManyArgs
  ): Promise<RankAdjustment[]> {
    return this.service.rankAdjustments(args);
  }

  @graphql.Query(() => RankAdjustment, { nullable: true })
  async rankAdjustment(
    @graphql.Args() args: RankAdjustmentFindUniqueArgs
  ): Promise<RankAdjustment | null> {
    const result = await this.service.rankAdjustment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RankAdjustment)
  async createRankAdjustment(
    @graphql.Args() args: CreateRankAdjustmentArgs
  ): Promise<RankAdjustment> {
    return await this.service.createRankAdjustment({
      ...args,
      data: {
        ...args.data,

        rank: args.data.rank
          ? {
              connect: args.data.rank,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RankAdjustment)
  async updateRankAdjustment(
    @graphql.Args() args: UpdateRankAdjustmentArgs
  ): Promise<RankAdjustment | null> {
    try {
      return await this.service.updateRankAdjustment({
        ...args,
        data: {
          ...args.data,

          rank: args.data.rank
            ? {
                connect: args.data.rank,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RankAdjustment)
  async deleteRankAdjustment(
    @graphql.Args() args: DeleteRankAdjustmentArgs
  ): Promise<RankAdjustment | null> {
    try {
      return await this.service.deleteRankAdjustment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Rank, {
    nullable: true,
    name: "rank",
  })
  async getRank(
    @graphql.Parent() parent: RankAdjustment
  ): Promise<Rank | null> {
    const result = await this.service.getRank(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
