/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Rank as PrismaRank,
  RankAdjustment as PrismaRankAdjustment,
  RankPromotion as PrismaRankPromotion,
} from "@prisma/client";

export class RankServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RankCountArgs, "select">): Promise<number> {
    return this.prisma.rank.count(args);
  }

  async ranks(args: Prisma.RankFindManyArgs): Promise<PrismaRank[]> {
    return this.prisma.rank.findMany(args);
  }
  async rank(args: Prisma.RankFindUniqueArgs): Promise<PrismaRank | null> {
    return this.prisma.rank.findUnique(args);
  }
  async createRank(args: Prisma.RankCreateArgs): Promise<PrismaRank> {
    return this.prisma.rank.create(args);
  }
  async updateRank(args: Prisma.RankUpdateArgs): Promise<PrismaRank> {
    return this.prisma.rank.update(args);
  }
  async deleteRank(args: Prisma.RankDeleteArgs): Promise<PrismaRank> {
    return this.prisma.rank.delete(args);
  }

  async findRankAdjustments(
    parentId: string,
    args: Prisma.RankAdjustmentFindManyArgs
  ): Promise<PrismaRankAdjustment[]> {
    return this.prisma.rank
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rankAdjustments(args);
  }

  async findRankPromotions(
    parentId: string,
    args: Prisma.RankPromotionFindManyArgs
  ): Promise<PrismaRankPromotion[]> {
    return this.prisma.rank
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rankPromotions(args);
  }
}
