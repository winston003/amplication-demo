/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RankService } from "../rank.service";
import { RankCreateInput } from "./RankCreateInput";
import { Rank } from "./Rank";
import { RankFindManyArgs } from "./RankFindManyArgs";
import { RankWhereUniqueInput } from "./RankWhereUniqueInput";
import { RankUpdateInput } from "./RankUpdateInput";
import { RankAdjustmentFindManyArgs } from "../../rankAdjustment/base/RankAdjustmentFindManyArgs";
import { RankAdjustment } from "../../rankAdjustment/base/RankAdjustment";
import { RankAdjustmentWhereUniqueInput } from "../../rankAdjustment/base/RankAdjustmentWhereUniqueInput";
import { RankPromotionFindManyArgs } from "../../rankPromotion/base/RankPromotionFindManyArgs";
import { RankPromotion } from "../../rankPromotion/base/RankPromotion";
import { RankPromotionWhereUniqueInput } from "../../rankPromotion/base/RankPromotionWhereUniqueInput";

export class RankControllerBase {
  constructor(protected readonly service: RankService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Rank })
  async createRank(@common.Body() data: RankCreateInput): Promise<Rank> {
    return await this.service.createRank({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        requirements: true,
        responsibilities: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Rank] })
  @ApiNestedQuery(RankFindManyArgs)
  async ranks(@common.Req() request: Request): Promise<Rank[]> {
    const args = plainToClass(RankFindManyArgs, request.query);
    return this.service.ranks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        requirements: true,
        responsibilities: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Rank })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rank(
    @common.Param() params: RankWhereUniqueInput
  ): Promise<Rank | null> {
    const result = await this.service.rank({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        requirements: true,
        responsibilities: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Rank })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRank(
    @common.Param() params: RankWhereUniqueInput,
    @common.Body() data: RankUpdateInput
  ): Promise<Rank | null> {
    try {
      return await this.service.updateRank({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          requirements: true,
          responsibilities: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Rank })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRank(
    @common.Param() params: RankWhereUniqueInput
  ): Promise<Rank | null> {
    try {
      return await this.service.deleteRank({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          requirements: true,
          responsibilities: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/rankAdjustments")
  @ApiNestedQuery(RankAdjustmentFindManyArgs)
  async findRankAdjustments(
    @common.Req() request: Request,
    @common.Param() params: RankWhereUniqueInput
  ): Promise<RankAdjustment[]> {
    const query = plainToClass(RankAdjustmentFindManyArgs, request.query);
    const results = await this.service.findRankAdjustments(params.id, {
      ...query,
      select: {
        adjustmentReason: true,
        createdAt: true,
        effectiveDate: true,
        id: true,

        rank: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rankAdjustments")
  async connectRankAdjustments(
    @common.Param() params: RankWhereUniqueInput,
    @common.Body() body: RankAdjustmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rankAdjustments: {
        connect: body,
      },
    };
    await this.service.updateRank({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rankAdjustments")
  async updateRankAdjustments(
    @common.Param() params: RankWhereUniqueInput,
    @common.Body() body: RankAdjustmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rankAdjustments: {
        set: body,
      },
    };
    await this.service.updateRank({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rankAdjustments")
  async disconnectRankAdjustments(
    @common.Param() params: RankWhereUniqueInput,
    @common.Body() body: RankAdjustmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rankAdjustments: {
        disconnect: body,
      },
    };
    await this.service.updateRank({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rankPromotions")
  @ApiNestedQuery(RankPromotionFindManyArgs)
  async findRankPromotions(
    @common.Req() request: Request,
    @common.Param() params: RankWhereUniqueInput
  ): Promise<RankPromotion[]> {
    const query = plainToClass(RankPromotionFindManyArgs, request.query);
    const results = await this.service.findRankPromotions(params.id, {
      ...query,
      select: {
        applicant: true,
        applicationDate: true,
        approvalStatus: true,
        createdAt: true,
        id: true,

        rank: {
          select: {
            id: true,
          },
        },

        reviewCommittee: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rankPromotions")
  async connectRankPromotions(
    @common.Param() params: RankWhereUniqueInput,
    @common.Body() body: RankPromotionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rankPromotions: {
        connect: body,
      },
    };
    await this.service.updateRank({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rankPromotions")
  async updateRankPromotions(
    @common.Param() params: RankWhereUniqueInput,
    @common.Body() body: RankPromotionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rankPromotions: {
        set: body,
      },
    };
    await this.service.updateRank({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rankPromotions")
  async disconnectRankPromotions(
    @common.Param() params: RankWhereUniqueInput,
    @common.Body() body: RankPromotionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rankPromotions: {
        disconnect: body,
      },
    };
    await this.service.updateRank({
      where: params,
      data,
      select: { id: true },
    });
  }
}
