/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Rank } from "./Rank";
import { RankCountArgs } from "./RankCountArgs";
import { RankFindManyArgs } from "./RankFindManyArgs";
import { Query } from "../../query/base/Query";
import { RankFindUniqueArgs } from "./RankFindUniqueArgs";
import { CreateRankArgs } from "./CreateRankArgs";
import { UpdateRankArgs } from "./UpdateRankArgs";
import { DeleteRankArgs } from "./DeleteRankArgs";
import { RankAdjustmentFindManyArgs } from "../../rankAdjustment/base/RankAdjustmentFindManyArgs";
import { RankAdjustment } from "../../rankAdjustment/base/RankAdjustment";
import { RankPromotionFindManyArgs } from "../../rankPromotion/base/RankPromotionFindManyArgs";
import { RankPromotion } from "../../rankPromotion/base/RankPromotion";
import { RankService } from "../rank.service";
@graphql.Resolver(() => Rank)
export class RankResolverBase {
  constructor(protected readonly service: RankService) {}

  async _ranksMeta(
    @graphql.Args() args: RankCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Rank])
  async ranks(@graphql.Args() args: RankFindManyArgs): Promise<Rank[]> {
    return this.service.ranks(args);
  }

  @graphql.Query(() => Rank, { nullable: true })
  async rank(@graphql.Args() args: RankFindUniqueArgs): Promise<Rank | null> {
    const result = await this.service.rank(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Rank)
  async createRank(@graphql.Args() args: CreateRankArgs): Promise<Rank> {
    return await this.service.createRank({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Rank)
  async updateRank(@graphql.Args() args: UpdateRankArgs): Promise<Rank | null> {
    try {
      return await this.service.updateRank({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rank)
  async deleteRank(@graphql.Args() args: DeleteRankArgs): Promise<Rank | null> {
    try {
      return await this.service.deleteRank(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [RankAdjustment], { name: "rankAdjustments" })
  async findRankAdjustments(
    @graphql.Parent() parent: Rank,
    @graphql.Args() args: RankAdjustmentFindManyArgs
  ): Promise<RankAdjustment[]> {
    const results = await this.service.findRankAdjustments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [RankPromotion], { name: "rankPromotions" })
  async findRankPromotions(
    @graphql.Parent() parent: Rank,
    @graphql.Args() args: RankPromotionFindManyArgs
  ): Promise<RankPromotion[]> {
    const results = await this.service.findRankPromotions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
