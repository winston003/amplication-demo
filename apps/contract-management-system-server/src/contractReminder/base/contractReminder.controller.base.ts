/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContractReminderService } from "../contractReminder.service";
import { ContractReminderCreateInput } from "./ContractReminderCreateInput";
import { ContractReminder } from "./ContractReminder";
import { ContractReminderFindManyArgs } from "./ContractReminderFindManyArgs";
import { ContractReminderWhereUniqueInput } from "./ContractReminderWhereUniqueInput";
import { ContractReminderUpdateInput } from "./ContractReminderUpdateInput";

export class ContractReminderControllerBase {
  constructor(protected readonly service: ContractReminderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContractReminder })
  async createContractReminder(
    @common.Body() data: ContractReminderCreateInput
  ): Promise<ContractReminder> {
    return await this.service.createContractReminder({
      data: {
        ...data,

        contract: data.contract
          ? {
              connect: data.contract,
            }
          : undefined,
      },
      select: {
        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        message: true,
        reminderDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContractReminder] })
  @ApiNestedQuery(ContractReminderFindManyArgs)
  async contractReminders(
    @common.Req() request: Request
  ): Promise<ContractReminder[]> {
    const args = plainToClass(ContractReminderFindManyArgs, request.query);
    return this.service.contractReminders({
      ...args,
      select: {
        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        message: true,
        reminderDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContractReminder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contractReminder(
    @common.Param() params: ContractReminderWhereUniqueInput
  ): Promise<ContractReminder | null> {
    const result = await this.service.contractReminder({
      where: params,
      select: {
        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        message: true,
        reminderDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContractReminder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContractReminder(
    @common.Param() params: ContractReminderWhereUniqueInput,
    @common.Body() data: ContractReminderUpdateInput
  ): Promise<ContractReminder | null> {
    try {
      return await this.service.updateContractReminder({
        where: params,
        data: {
          ...data,

          contract: data.contract
            ? {
                connect: data.contract,
              }
            : undefined,
        },
        select: {
          contract: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          message: true,
          reminderDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContractReminder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContractReminder(
    @common.Param() params: ContractReminderWhereUniqueInput
  ): Promise<ContractReminder | null> {
    try {
      return await this.service.deleteContractReminder({
        where: params,
        select: {
          contract: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          message: true,
          reminderDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
