/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContractTemplate } from "./ContractTemplate";
import { ContractTemplateCountArgs } from "./ContractTemplateCountArgs";
import { ContractTemplateFindManyArgs } from "./ContractTemplateFindManyArgs";
import { ContractTemplateFindUniqueArgs } from "./ContractTemplateFindUniqueArgs";
import { CreateContractTemplateArgs } from "./CreateContractTemplateArgs";
import { UpdateContractTemplateArgs } from "./UpdateContractTemplateArgs";
import { DeleteContractTemplateArgs } from "./DeleteContractTemplateArgs";
import { ContractTemplateService } from "../contractTemplate.service";
@graphql.Resolver(() => ContractTemplate)
export class ContractTemplateResolverBase {
  constructor(protected readonly service: ContractTemplateService) {}

  async _contractTemplatesMeta(
    @graphql.Args() args: ContractTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContractTemplate])
  async contractTemplates(
    @graphql.Args() args: ContractTemplateFindManyArgs
  ): Promise<ContractTemplate[]> {
    return this.service.contractTemplates(args);
  }

  @graphql.Query(() => ContractTemplate, { nullable: true })
  async contractTemplate(
    @graphql.Args() args: ContractTemplateFindUniqueArgs
  ): Promise<ContractTemplate | null> {
    const result = await this.service.contractTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContractTemplate)
  async createContractTemplate(
    @graphql.Args() args: CreateContractTemplateArgs
  ): Promise<ContractTemplate> {
    return await this.service.createContractTemplate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContractTemplate)
  async updateContractTemplate(
    @graphql.Args() args: UpdateContractTemplateArgs
  ): Promise<ContractTemplate | null> {
    try {
      return await this.service.updateContractTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContractTemplate)
  async deleteContractTemplate(
    @graphql.Args() args: DeleteContractTemplateArgs
  ): Promise<ContractTemplate | null> {
    try {
      return await this.service.deleteContractTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
