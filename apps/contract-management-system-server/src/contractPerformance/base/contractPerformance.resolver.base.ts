/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContractPerformance } from "./ContractPerformance";
import { ContractPerformanceCountArgs } from "./ContractPerformanceCountArgs";
import { ContractPerformanceFindManyArgs } from "./ContractPerformanceFindManyArgs";
import { ContractPerformanceFindUniqueArgs } from "./ContractPerformanceFindUniqueArgs";
import { CreateContractPerformanceArgs } from "./CreateContractPerformanceArgs";
import { UpdateContractPerformanceArgs } from "./UpdateContractPerformanceArgs";
import { DeleteContractPerformanceArgs } from "./DeleteContractPerformanceArgs";
import { Contract } from "../../contract/base/Contract";
import { ContractPerformanceService } from "../contractPerformance.service";
@graphql.Resolver(() => ContractPerformance)
export class ContractPerformanceResolverBase {
  constructor(protected readonly service: ContractPerformanceService) {}

  async _contractPerformancesMeta(
    @graphql.Args() args: ContractPerformanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContractPerformance])
  async contractPerformances(
    @graphql.Args() args: ContractPerformanceFindManyArgs
  ): Promise<ContractPerformance[]> {
    return this.service.contractPerformances(args);
  }

  @graphql.Query(() => ContractPerformance, { nullable: true })
  async contractPerformance(
    @graphql.Args() args: ContractPerformanceFindUniqueArgs
  ): Promise<ContractPerformance | null> {
    const result = await this.service.contractPerformance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContractPerformance)
  async createContractPerformance(
    @graphql.Args() args: CreateContractPerformanceArgs
  ): Promise<ContractPerformance> {
    return await this.service.createContractPerformance({
      ...args,
      data: {
        ...args.data,

        contract: args.data.contract
          ? {
              connect: args.data.contract,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ContractPerformance)
  async updateContractPerformance(
    @graphql.Args() args: UpdateContractPerformanceArgs
  ): Promise<ContractPerformance | null> {
    try {
      return await this.service.updateContractPerformance({
        ...args,
        data: {
          ...args.data,

          contract: args.data.contract
            ? {
                connect: args.data.contract,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContractPerformance)
  async deleteContractPerformance(
    @graphql.Args() args: DeleteContractPerformanceArgs
  ): Promise<ContractPerformance | null> {
    try {
      return await this.service.deleteContractPerformance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Contract, {
    nullable: true,
    name: "contract",
  })
  async getContract(
    @graphql.Parent() parent: ContractPerformance
  ): Promise<Contract | null> {
    const result = await this.service.getContract(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
