/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContractPerformanceService } from "../contractPerformance.service";
import { ContractPerformanceCreateInput } from "./ContractPerformanceCreateInput";
import { ContractPerformance } from "./ContractPerformance";
import { ContractPerformanceFindManyArgs } from "./ContractPerformanceFindManyArgs";
import { ContractPerformanceWhereUniqueInput } from "./ContractPerformanceWhereUniqueInput";
import { ContractPerformanceUpdateInput } from "./ContractPerformanceUpdateInput";

export class ContractPerformanceControllerBase {
  constructor(protected readonly service: ContractPerformanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContractPerformance })
  async createContractPerformance(
    @common.Body() data: ContractPerformanceCreateInput
  ): Promise<ContractPerformance> {
    return await this.service.createContractPerformance({
      data: {
        ...data,

        contract: data.contract
          ? {
              connect: data.contract,
            }
          : undefined,
      },
      select: {
        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        milestone: true,
        recordedDate: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContractPerformance] })
  @ApiNestedQuery(ContractPerformanceFindManyArgs)
  async contractPerformances(
    @common.Req() request: Request
  ): Promise<ContractPerformance[]> {
    const args = plainToClass(ContractPerformanceFindManyArgs, request.query);
    return this.service.contractPerformances({
      ...args,
      select: {
        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        milestone: true,
        recordedDate: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContractPerformance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contractPerformance(
    @common.Param() params: ContractPerformanceWhereUniqueInput
  ): Promise<ContractPerformance | null> {
    const result = await this.service.contractPerformance({
      where: params,
      select: {
        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        milestone: true,
        recordedDate: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContractPerformance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContractPerformance(
    @common.Param() params: ContractPerformanceWhereUniqueInput,
    @common.Body() data: ContractPerformanceUpdateInput
  ): Promise<ContractPerformance | null> {
    try {
      return await this.service.updateContractPerformance({
        where: params,
        data: {
          ...data,

          contract: data.contract
            ? {
                connect: data.contract,
              }
            : undefined,
        },
        select: {
          contract: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          milestone: true,
          recordedDate: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContractPerformance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContractPerformance(
    @common.Param() params: ContractPerformanceWhereUniqueInput
  ): Promise<ContractPerformance | null> {
    try {
      return await this.service.deleteContractPerformance({
        where: params,
        select: {
          contract: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          milestone: true,
          recordedDate: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
