/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ContractApprovalListRelationFilter } from "../../contractApproval/base/ContractApprovalListRelationFilter";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { ContractPerformanceListRelationFilter } from "../../contractPerformance/base/ContractPerformanceListRelationFilter";
import { ContractQueryListRelationFilter } from "../../contractQuery/base/ContractQueryListRelationFilter";
import { ContractReminderListRelationFilter } from "../../contractReminder/base/ContractReminderListRelationFilter";
import { ContractVersionListRelationFilter } from "../../contractVersion/base/ContractVersionListRelationFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { EnumContractStatus } from "./EnumContractStatus";

@InputType()
class ContractWhereInput {
  @ApiProperty({
    required: false,
    type: () => ContractApprovalListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ContractApprovalListRelationFilter)
  @IsOptional()
  @Field(() => ContractApprovalListRelationFilter, {
    nullable: true,
  })
  contractApprovals?: ContractApprovalListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ContractPerformanceListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ContractPerformanceListRelationFilter)
  @IsOptional()
  @Field(() => ContractPerformanceListRelationFilter, {
    nullable: true,
  })
  contractPerformances?: ContractPerformanceListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ContractQueryListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ContractQueryListRelationFilter)
  @IsOptional()
  @Field(() => ContractQueryListRelationFilter, {
    nullable: true,
  })
  contractQueries?: ContractQueryListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ContractReminderListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ContractReminderListRelationFilter)
  @IsOptional()
  @Field(() => ContractReminderListRelationFilter, {
    nullable: true,
  })
  contractReminders?: ContractReminderListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ContractVersionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ContractVersionListRelationFilter)
  @IsOptional()
  @Field(() => ContractVersionListRelationFilter, {
    nullable: true,
  })
  contractVersions?: ContractVersionListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  description?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    enum: EnumContractStatus,
  })
  @IsEnum(EnumContractStatus)
  @IsOptional()
  @Field(() => EnumContractStatus, {
    nullable: true,
  })
  status?: "Option1";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  template?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  title?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  version?: StringNullableFilter;
}

export { ContractWhereInput as ContractWhereInput };
