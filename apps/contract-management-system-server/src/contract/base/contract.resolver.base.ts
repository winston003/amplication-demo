/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Contract } from "./Contract";
import { ContractCountArgs } from "./ContractCountArgs";
import { ContractFindManyArgs } from "./ContractFindManyArgs";
import { ContractFindUniqueArgs } from "./ContractFindUniqueArgs";
import { CreateContractArgs } from "./CreateContractArgs";
import { UpdateContractArgs } from "./UpdateContractArgs";
import { DeleteContractArgs } from "./DeleteContractArgs";
import { ContractApprovalFindManyArgs } from "../../contractApproval/base/ContractApprovalFindManyArgs";
import { ContractApproval } from "../../contractApproval/base/ContractApproval";
import { ContractPerformanceFindManyArgs } from "../../contractPerformance/base/ContractPerformanceFindManyArgs";
import { ContractPerformance } from "../../contractPerformance/base/ContractPerformance";
import { ContractQueryFindManyArgs } from "../../contractQuery/base/ContractQueryFindManyArgs";
import { ContractQuery } from "../../contractQuery/base/ContractQuery";
import { ContractReminderFindManyArgs } from "../../contractReminder/base/ContractReminderFindManyArgs";
import { ContractReminder } from "../../contractReminder/base/ContractReminder";
import { ContractVersionFindManyArgs } from "../../contractVersion/base/ContractVersionFindManyArgs";
import { ContractVersion } from "../../contractVersion/base/ContractVersion";
import { ContractService } from "../contract.service";
@graphql.Resolver(() => Contract)
export class ContractResolverBase {
  constructor(protected readonly service: ContractService) {}

  async _contractsMeta(
    @graphql.Args() args: ContractCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Contract])
  async contracts(
    @graphql.Args() args: ContractFindManyArgs
  ): Promise<Contract[]> {
    return this.service.contracts(args);
  }

  @graphql.Query(() => Contract, { nullable: true })
  async contract(
    @graphql.Args() args: ContractFindUniqueArgs
  ): Promise<Contract | null> {
    const result = await this.service.contract(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Contract)
  async createContract(
    @graphql.Args() args: CreateContractArgs
  ): Promise<Contract> {
    return await this.service.createContract({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Contract)
  async updateContract(
    @graphql.Args() args: UpdateContractArgs
  ): Promise<Contract | null> {
    try {
      return await this.service.updateContract({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Contract)
  async deleteContract(
    @graphql.Args() args: DeleteContractArgs
  ): Promise<Contract | null> {
    try {
      return await this.service.deleteContract(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ContractApproval], { name: "contractApprovals" })
  async findContractApprovals(
    @graphql.Parent() parent: Contract,
    @graphql.Args() args: ContractApprovalFindManyArgs
  ): Promise<ContractApproval[]> {
    const results = await this.service.findContractApprovals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ContractPerformance], {
    name: "contractPerformances",
  })
  async findContractPerformances(
    @graphql.Parent() parent: Contract,
    @graphql.Args() args: ContractPerformanceFindManyArgs
  ): Promise<ContractPerformance[]> {
    const results = await this.service.findContractPerformances(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ContractQuery], { name: "contractQueries" })
  async findContractQueries(
    @graphql.Parent() parent: Contract,
    @graphql.Args() args: ContractQueryFindManyArgs
  ): Promise<ContractQuery[]> {
    const results = await this.service.findContractQueries(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ContractReminder], { name: "contractReminders" })
  async findContractReminders(
    @graphql.Parent() parent: Contract,
    @graphql.Args() args: ContractReminderFindManyArgs
  ): Promise<ContractReminder[]> {
    const results = await this.service.findContractReminders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ContractVersion], { name: "contractVersions" })
  async findContractVersions(
    @graphql.Parent() parent: Contract,
    @graphql.Args() args: ContractVersionFindManyArgs
  ): Promise<ContractVersion[]> {
    const results = await this.service.findContractVersions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
