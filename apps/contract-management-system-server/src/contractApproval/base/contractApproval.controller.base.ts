/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContractApprovalService } from "../contractApproval.service";
import { ContractApprovalCreateInput } from "./ContractApprovalCreateInput";
import { ContractApproval } from "./ContractApproval";
import { ContractApprovalFindManyArgs } from "./ContractApprovalFindManyArgs";
import { ContractApprovalWhereUniqueInput } from "./ContractApprovalWhereUniqueInput";
import { ContractApprovalUpdateInput } from "./ContractApprovalUpdateInput";

export class ContractApprovalControllerBase {
  constructor(protected readonly service: ContractApprovalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContractApproval })
  async createContractApproval(
    @common.Body() data: ContractApprovalCreateInput
  ): Promise<ContractApproval> {
    return await this.service.createContractApproval({
      data: {
        ...data,

        contract: data.contract
          ? {
              connect: data.contract,
            }
          : undefined,
      },
      select: {
        approvalDate: true,
        approver: true,

        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContractApproval] })
  @ApiNestedQuery(ContractApprovalFindManyArgs)
  async contractApprovals(
    @common.Req() request: Request
  ): Promise<ContractApproval[]> {
    const args = plainToClass(ContractApprovalFindManyArgs, request.query);
    return this.service.contractApprovals({
      ...args,
      select: {
        approvalDate: true,
        approver: true,

        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContractApproval })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contractApproval(
    @common.Param() params: ContractApprovalWhereUniqueInput
  ): Promise<ContractApproval | null> {
    const result = await this.service.contractApproval({
      where: params,
      select: {
        approvalDate: true,
        approver: true,

        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContractApproval })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContractApproval(
    @common.Param() params: ContractApprovalWhereUniqueInput,
    @common.Body() data: ContractApprovalUpdateInput
  ): Promise<ContractApproval | null> {
    try {
      return await this.service.updateContractApproval({
        where: params,
        data: {
          ...data,

          contract: data.contract
            ? {
                connect: data.contract,
              }
            : undefined,
        },
        select: {
          approvalDate: true,
          approver: true,

          contract: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContractApproval })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContractApproval(
    @common.Param() params: ContractApprovalWhereUniqueInput
  ): Promise<ContractApproval | null> {
    try {
      return await this.service.deleteContractApproval({
        where: params,
        select: {
          approvalDate: true,
          approver: true,

          contract: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
