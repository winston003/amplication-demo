/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ContractApproval as PrismaContractApproval,
  Contract as PrismaContract,
} from "@prisma/client";

export class ContractApprovalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContractApprovalCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contractApproval.count(args);
  }

  async contractApprovals(
    args: Prisma.ContractApprovalFindManyArgs
  ): Promise<PrismaContractApproval[]> {
    return this.prisma.contractApproval.findMany(args);
  }
  async contractApproval(
    args: Prisma.ContractApprovalFindUniqueArgs
  ): Promise<PrismaContractApproval | null> {
    return this.prisma.contractApproval.findUnique(args);
  }
  async createContractApproval(
    args: Prisma.ContractApprovalCreateArgs
  ): Promise<PrismaContractApproval> {
    return this.prisma.contractApproval.create(args);
  }
  async updateContractApproval(
    args: Prisma.ContractApprovalUpdateArgs
  ): Promise<PrismaContractApproval> {
    return this.prisma.contractApproval.update(args);
  }
  async deleteContractApproval(
    args: Prisma.ContractApprovalDeleteArgs
  ): Promise<PrismaContractApproval> {
    return this.prisma.contractApproval.delete(args);
  }

  async getContract(parentId: string): Promise<PrismaContract | null> {
    return this.prisma.contractApproval
      .findUnique({
        where: { id: parentId },
      })
      .contract();
  }
}
