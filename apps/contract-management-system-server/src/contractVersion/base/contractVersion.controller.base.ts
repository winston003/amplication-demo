/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContractVersionService } from "../contractVersion.service";
import { ContractVersionCreateInput } from "./ContractVersionCreateInput";
import { ContractVersion } from "./ContractVersion";
import { ContractVersionFindManyArgs } from "./ContractVersionFindManyArgs";
import { ContractVersionWhereUniqueInput } from "./ContractVersionWhereUniqueInput";
import { ContractVersionUpdateInput } from "./ContractVersionUpdateInput";

export class ContractVersionControllerBase {
  constructor(protected readonly service: ContractVersionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContractVersion })
  async createContractVersion(
    @common.Body() data: ContractVersionCreateInput
  ): Promise<ContractVersion> {
    return await this.service.createContractVersion({
      data: {
        ...data,

        contract: data.contract
          ? {
              connect: data.contract,
            }
          : undefined,
      },
      select: {
        changes: true,

        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        modificationDate: true,
        updatedAt: true,
        versionNumber: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContractVersion] })
  @ApiNestedQuery(ContractVersionFindManyArgs)
  async contractVersions(
    @common.Req() request: Request
  ): Promise<ContractVersion[]> {
    const args = plainToClass(ContractVersionFindManyArgs, request.query);
    return this.service.contractVersions({
      ...args,
      select: {
        changes: true,

        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        modificationDate: true,
        updatedAt: true,
        versionNumber: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContractVersion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contractVersion(
    @common.Param() params: ContractVersionWhereUniqueInput
  ): Promise<ContractVersion | null> {
    const result = await this.service.contractVersion({
      where: params,
      select: {
        changes: true,

        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        modificationDate: true,
        updatedAt: true,
        versionNumber: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContractVersion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContractVersion(
    @common.Param() params: ContractVersionWhereUniqueInput,
    @common.Body() data: ContractVersionUpdateInput
  ): Promise<ContractVersion | null> {
    try {
      return await this.service.updateContractVersion({
        where: params,
        data: {
          ...data,

          contract: data.contract
            ? {
                connect: data.contract,
              }
            : undefined,
        },
        select: {
          changes: true,

          contract: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          modificationDate: true,
          updatedAt: true,
          versionNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContractVersion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContractVersion(
    @common.Param() params: ContractVersionWhereUniqueInput
  ): Promise<ContractVersion | null> {
    try {
      return await this.service.deleteContractVersion({
        where: params,
        select: {
          changes: true,

          contract: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          modificationDate: true,
          updatedAt: true,
          versionNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
