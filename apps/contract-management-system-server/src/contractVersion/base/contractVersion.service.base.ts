/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ContractVersion as PrismaContractVersion,
  Contract as PrismaContract,
} from "@prisma/client";

export class ContractVersionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContractVersionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contractVersion.count(args);
  }

  async contractVersions(
    args: Prisma.ContractVersionFindManyArgs
  ): Promise<PrismaContractVersion[]> {
    return this.prisma.contractVersion.findMany(args);
  }
  async contractVersion(
    args: Prisma.ContractVersionFindUniqueArgs
  ): Promise<PrismaContractVersion | null> {
    return this.prisma.contractVersion.findUnique(args);
  }
  async createContractVersion(
    args: Prisma.ContractVersionCreateArgs
  ): Promise<PrismaContractVersion> {
    return this.prisma.contractVersion.create(args);
  }
  async updateContractVersion(
    args: Prisma.ContractVersionUpdateArgs
  ): Promise<PrismaContractVersion> {
    return this.prisma.contractVersion.update(args);
  }
  async deleteContractVersion(
    args: Prisma.ContractVersionDeleteArgs
  ): Promise<PrismaContractVersion> {
    return this.prisma.contractVersion.delete(args);
  }

  async getContract(parentId: string): Promise<PrismaContract | null> {
    return this.prisma.contractVersion
      .findUnique({
        where: { id: parentId },
      })
      .contract();
  }
}
