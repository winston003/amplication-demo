/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContractVersion } from "./ContractVersion";
import { ContractVersionCountArgs } from "./ContractVersionCountArgs";
import { ContractVersionFindManyArgs } from "./ContractVersionFindManyArgs";
import { ContractVersionFindUniqueArgs } from "./ContractVersionFindUniqueArgs";
import { CreateContractVersionArgs } from "./CreateContractVersionArgs";
import { UpdateContractVersionArgs } from "./UpdateContractVersionArgs";
import { DeleteContractVersionArgs } from "./DeleteContractVersionArgs";
import { Contract } from "../../contract/base/Contract";
import { ContractVersionService } from "../contractVersion.service";
@graphql.Resolver(() => ContractVersion)
export class ContractVersionResolverBase {
  constructor(protected readonly service: ContractVersionService) {}

  async _contractVersionsMeta(
    @graphql.Args() args: ContractVersionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContractVersion])
  async contractVersions(
    @graphql.Args() args: ContractVersionFindManyArgs
  ): Promise<ContractVersion[]> {
    return this.service.contractVersions(args);
  }

  @graphql.Query(() => ContractVersion, { nullable: true })
  async contractVersion(
    @graphql.Args() args: ContractVersionFindUniqueArgs
  ): Promise<ContractVersion | null> {
    const result = await this.service.contractVersion(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContractVersion)
  async createContractVersion(
    @graphql.Args() args: CreateContractVersionArgs
  ): Promise<ContractVersion> {
    return await this.service.createContractVersion({
      ...args,
      data: {
        ...args.data,

        contract: args.data.contract
          ? {
              connect: args.data.contract,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ContractVersion)
  async updateContractVersion(
    @graphql.Args() args: UpdateContractVersionArgs
  ): Promise<ContractVersion | null> {
    try {
      return await this.service.updateContractVersion({
        ...args,
        data: {
          ...args.data,

          contract: args.data.contract
            ? {
                connect: args.data.contract,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContractVersion)
  async deleteContractVersion(
    @graphql.Args() args: DeleteContractVersionArgs
  ): Promise<ContractVersion | null> {
    try {
      return await this.service.deleteContractVersion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Contract, {
    nullable: true,
    name: "contract",
  })
  async getContract(
    @graphql.Parent() parent: ContractVersion
  ): Promise<Contract | null> {
    const result = await this.service.getContract(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
