/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContractQuery } from "./ContractQuery";
import { ContractQueryCountArgs } from "./ContractQueryCountArgs";
import { ContractQueryFindManyArgs } from "./ContractQueryFindManyArgs";
import { ContractQueryFindUniqueArgs } from "./ContractQueryFindUniqueArgs";
import { CreateContractQueryArgs } from "./CreateContractQueryArgs";
import { UpdateContractQueryArgs } from "./UpdateContractQueryArgs";
import { DeleteContractQueryArgs } from "./DeleteContractQueryArgs";
import { Contract } from "../../contract/base/Contract";
import { ContractQueryService } from "../contractQuery.service";
@graphql.Resolver(() => ContractQuery)
export class ContractQueryResolverBase {
  constructor(protected readonly service: ContractQueryService) {}

  async _contractQueriesMeta(
    @graphql.Args() args: ContractQueryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContractQuery])
  async contractQueries(
    @graphql.Args() args: ContractQueryFindManyArgs
  ): Promise<ContractQuery[]> {
    return this.service.contractQueries(args);
  }

  @graphql.Query(() => ContractQuery, { nullable: true })
  async contractQuery(
    @graphql.Args() args: ContractQueryFindUniqueArgs
  ): Promise<ContractQuery | null> {
    const result = await this.service.contractQuery(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContractQuery)
  async createContractQuery(
    @graphql.Args() args: CreateContractQueryArgs
  ): Promise<ContractQuery> {
    return await this.service.createContractQuery({
      ...args,
      data: {
        ...args.data,

        contract: args.data.contract
          ? {
              connect: args.data.contract,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ContractQuery)
  async updateContractQuery(
    @graphql.Args() args: UpdateContractQueryArgs
  ): Promise<ContractQuery | null> {
    try {
      return await this.service.updateContractQuery({
        ...args,
        data: {
          ...args.data,

          contract: args.data.contract
            ? {
                connect: args.data.contract,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContractQuery)
  async deleteContractQuery(
    @graphql.Args() args: DeleteContractQueryArgs
  ): Promise<ContractQuery | null> {
    try {
      return await this.service.deleteContractQuery(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Contract, {
    nullable: true,
    name: "contract",
  })
  async getContract(
    @graphql.Parent() parent: ContractQuery
  ): Promise<Contract | null> {
    const result = await this.service.getContract(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
