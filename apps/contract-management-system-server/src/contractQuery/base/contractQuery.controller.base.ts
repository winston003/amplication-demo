/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContractQueryService } from "../contractQuery.service";
import { ContractQueryCreateInput } from "./ContractQueryCreateInput";
import { ContractQuery } from "./ContractQuery";
import { ContractQueryFindManyArgs } from "./ContractQueryFindManyArgs";
import { ContractQueryWhereUniqueInput } from "./ContractQueryWhereUniqueInput";
import { ContractQueryUpdateInput } from "./ContractQueryUpdateInput";

export class ContractQueryControllerBase {
  constructor(protected readonly service: ContractQueryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContractQuery })
  async createContractQuery(
    @common.Body() data: ContractQueryCreateInput
  ): Promise<ContractQuery> {
    return await this.service.createContractQuery({
      data: {
        ...data,

        contract: data.contract
          ? {
              connect: data.contract,
            }
          : undefined,
      },
      select: {
        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        criteria: true,
        id: true,
        queryDate: true,
        queryType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContractQuery] })
  @ApiNestedQuery(ContractQueryFindManyArgs)
  async contractQueries(
    @common.Req() request: Request
  ): Promise<ContractQuery[]> {
    const args = plainToClass(ContractQueryFindManyArgs, request.query);
    return this.service.contractQueries({
      ...args,
      select: {
        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        criteria: true,
        id: true,
        queryDate: true,
        queryType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContractQuery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contractQuery(
    @common.Param() params: ContractQueryWhereUniqueInput
  ): Promise<ContractQuery | null> {
    const result = await this.service.contractQuery({
      where: params,
      select: {
        contract: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        criteria: true,
        id: true,
        queryDate: true,
        queryType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContractQuery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContractQuery(
    @common.Param() params: ContractQueryWhereUniqueInput,
    @common.Body() data: ContractQueryUpdateInput
  ): Promise<ContractQuery | null> {
    try {
      return await this.service.updateContractQuery({
        where: params,
        data: {
          ...data,

          contract: data.contract
            ? {
                connect: data.contract,
              }
            : undefined,
        },
        select: {
          contract: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          criteria: true,
          id: true,
          queryDate: true,
          queryType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContractQuery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContractQuery(
    @common.Param() params: ContractQueryWhereUniqueInput
  ): Promise<ContractQuery | null> {
    try {
      return await this.service.deleteContractQuery({
        where: params,
        select: {
          contract: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          criteria: true,
          id: true,
          queryDate: true,
          queryType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
