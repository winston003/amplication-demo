/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContractReport } from "./ContractReport";
import { ContractReportCountArgs } from "./ContractReportCountArgs";
import { ContractReportFindManyArgs } from "./ContractReportFindManyArgs";
import { ContractReportFindUniqueArgs } from "./ContractReportFindUniqueArgs";
import { CreateContractReportArgs } from "./CreateContractReportArgs";
import { UpdateContractReportArgs } from "./UpdateContractReportArgs";
import { DeleteContractReportArgs } from "./DeleteContractReportArgs";
import { ContractReportService } from "../contractReport.service";
@graphql.Resolver(() => ContractReport)
export class ContractReportResolverBase {
  constructor(protected readonly service: ContractReportService) {}

  async _contractReportsMeta(
    @graphql.Args() args: ContractReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContractReport])
  async contractReports(
    @graphql.Args() args: ContractReportFindManyArgs
  ): Promise<ContractReport[]> {
    return this.service.contractReports(args);
  }

  @graphql.Query(() => ContractReport, { nullable: true })
  async contractReport(
    @graphql.Args() args: ContractReportFindUniqueArgs
  ): Promise<ContractReport | null> {
    const result = await this.service.contractReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContractReport)
  async createContractReport(
    @graphql.Args() args: CreateContractReportArgs
  ): Promise<ContractReport> {
    return await this.service.createContractReport({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContractReport)
  async updateContractReport(
    @graphql.Args() args: UpdateContractReportArgs
  ): Promise<ContractReport | null> {
    try {
      return await this.service.updateContractReport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContractReport)
  async deleteContractReport(
    @graphql.Args() args: DeleteContractReportArgs
  ): Promise<ContractReport | null> {
    try {
      return await this.service.deleteContractReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
