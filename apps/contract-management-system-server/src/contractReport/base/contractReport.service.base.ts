/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ContractReport as PrismaContractReport } from "@prisma/client";

export class ContractReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContractReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contractReport.count(args);
  }

  async contractReports(
    args: Prisma.ContractReportFindManyArgs
  ): Promise<PrismaContractReport[]> {
    return this.prisma.contractReport.findMany(args);
  }
  async contractReport(
    args: Prisma.ContractReportFindUniqueArgs
  ): Promise<PrismaContractReport | null> {
    return this.prisma.contractReport.findUnique(args);
  }
  async createContractReport(
    args: Prisma.ContractReportCreateArgs
  ): Promise<PrismaContractReport> {
    return this.prisma.contractReport.create(args);
  }
  async updateContractReport(
    args: Prisma.ContractReportUpdateArgs
  ): Promise<PrismaContractReport> {
    return this.prisma.contractReport.update(args);
  }
  async deleteContractReport(
    args: Prisma.ContractReportDeleteArgs
  ): Promise<PrismaContractReport> {
    return this.prisma.contractReport.delete(args);
  }
}
