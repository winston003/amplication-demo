/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContractReportService } from "../contractReport.service";
import { ContractReportCreateInput } from "./ContractReportCreateInput";
import { ContractReport } from "./ContractReport";
import { ContractReportFindManyArgs } from "./ContractReportFindManyArgs";
import { ContractReportWhereUniqueInput } from "./ContractReportWhereUniqueInput";
import { ContractReportUpdateInput } from "./ContractReportUpdateInput";

export class ContractReportControllerBase {
  constructor(protected readonly service: ContractReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContractReport })
  async createContractReport(
    @common.Body() data: ContractReportCreateInput
  ): Promise<ContractReport> {
    return await this.service.createContractReport({
      data: data,
      select: {
        content: true,
        createdAt: true,
        format: true,
        generatedDate: true,
        id: true,
        reportName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContractReport] })
  @ApiNestedQuery(ContractReportFindManyArgs)
  async contractReports(
    @common.Req() request: Request
  ): Promise<ContractReport[]> {
    const args = plainToClass(ContractReportFindManyArgs, request.query);
    return this.service.contractReports({
      ...args,
      select: {
        content: true,
        createdAt: true,
        format: true,
        generatedDate: true,
        id: true,
        reportName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContractReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contractReport(
    @common.Param() params: ContractReportWhereUniqueInput
  ): Promise<ContractReport | null> {
    const result = await this.service.contractReport({
      where: params,
      select: {
        content: true,
        createdAt: true,
        format: true,
        generatedDate: true,
        id: true,
        reportName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContractReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContractReport(
    @common.Param() params: ContractReportWhereUniqueInput,
    @common.Body() data: ContractReportUpdateInput
  ): Promise<ContractReport | null> {
    try {
      return await this.service.updateContractReport({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          format: true,
          generatedDate: true,
          id: true,
          reportName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContractReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContractReport(
    @common.Param() params: ContractReportWhereUniqueInput
  ): Promise<ContractReport | null> {
    try {
      return await this.service.deleteContractReport({
        where: params,
        select: {
          content: true,
          createdAt: true,
          format: true,
          generatedDate: true,
          id: true,
          reportName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
